Maven tutorial link:
=====================
Link(https://www.youtube.com/watch?v=fy4adiZHqoo&list=PLS1QulWo1RIaLGvbwZCKPQBSy6I3Slamr)

About Maven:
=============
    A. What is maven.?
    ===================
        1. Maven is a popular build automation tool for Java-based projects that helps manage and organize the software development process.
        2. It provides a standard way to define project dependencies, build processes, and project structure making it easier for developers to manage and maintain complex Java applications.
        3. Maven uses a declarative approach for configuration and relies on XML files called "pom.xml" to describe the project structure, dependencies, and build process.
        4. It also offers a vast repository of open-source libraries and plugins that can be easily integrated into projects.
        
        Features of maven:
        ===================
            1. Dependency Management
            2. Project Standardization
            3. Build Automation
            4. Plugin System
            5. Consistent Builds
            6. Integration with IDE's 
            
        Note:
        ======
        1. If you want to work with maven, JDK is manadatory.
        
    
    B. Maven Lifecycle:
    ====================
        1. Maven is a powerful project management tool that is based on POM(project object model), used for project build, dependency, and documentation. It is a tool that can be used for building and 
           managing any Java-based project. Maven makes the day-to-day work of java developers easier and helps with the building and running of any Java-based project.
        2. Maven lifecycle diagram link(https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.educba.com%2Fmaven-life-cycle%2F&psig=AOvVaw0QBOS5UDG_1K5_8UphOTee&ust=
           1725253804318000&source=images&cd=vfe&opi=89978449&ved=0CBQQjRxqFwoTCJit_LX9oIgDFQAAAAAdAAAAABAE).
        3. The default Maven lifecycle consists of 8 major steps or phases for compiling, testing, building and installing a given Java project as specified below:
            
            a. Validate:
            =============
                -- This step validates if the project structure is correct(It checks if all the dependencies have been downloaded and are available in the local repository).
                -- Command: mvn validate
                Ex: Checking the existence of the pom.xml file and validating the project structure.
                    
            b. Compile:
            ============
                -- It compiles the source code, convert the .java files to .class files, and stores the classes in the target/classes folder.
                -- Command: mvn compile
                Ex: Compiling Java source files in "src/main/java"
                
            c. Test: 
            =========
                -- Tests the compiled source code using a suitable testing framework(JUnit).
                -- Command: mvn test
                Ex: Running unit tests in "src/test/java"
                
            d. Package: 
            ============
                -- Packages the compiled code into a distributable format, such as a JAR or WAR file.
                -- Command: mvn package
                Ex: Creating a myapp.jar or myapp.war file in the target/ directory.
                
            e. Integration Test:
            =====================
                -- It runs the integration tests for the project.
                -- Command: By default "mvn integration-test" also runs unit tests (using via surefire) but "mvn failsafe:integration-test" runs only the failsafe integration tests.
                
            f. Verify:
            ===========
                -- Runs any checks on results of integration tests to ensure quality criteria are met.
                -- Command: mvn verify
                Ex: Verifying that the integration tests have passed.
                
            g. Install:
            ============
                -- Installs the package into the local Maven repository, making it available for other projects on the same machine.
                -- Command: mvn install
                Ex: Installing the myapp.jar to the local Maven repository (~/.m2/repository).
                
            h. Deploy:
            ===========
                -- Copies the final package to the remote repository for sharing with other developers and projects.
                -- Command: mvn deploy
                Ex: Uploading the myapp.jar to a remote Maven repository. 
                
            i. Additional Phases in the Default Lifecycle:
            ===============================================
                -- mvn clean: This is part of the clean lifecycle, which removes files generated by the previous build.
                Ex: Use this command when you want to remove all the files generated by the previous build.
                
                -- mvn site: This is part of the site lifecycle, which generates project documentation. 
                Ex: Use this command to generate HTML documentation for your project, including reports on test coverage, dependencies, and more.
                
        4. Note:
        =========
            -- Each of these phases is executed sequentially when you run a Maven command like "mvn install" or "mvn deploy". You can also run specific phases by mentioning them 
               explicitly (e.g., mvn "test" to only run the test phase and everything before it).
               
               
    C. Maven Commands:
    ===================
        1. Cleaning and Rebuilding:
        ============================
            a. mvn clean install:
            ======================
                Description: Combines the clean and install phases, effectively cleaning the project and then building and installing the package.
                Use Case: Use this command to completely rebuild your project from scratch and install the final package to your local repository.
                
            b. mvn clean package:
            ======================
                Description: Combines the clean and package phases, cleaning the project and then packaging it.
                Use Case: Use this command to create a clean package of your project. 
                
        2. Site and Documentation Commands:
        ====================================
            a. mvn site:
            =============
                Description: Generates the projectâ€™s site documentation.
                Use Case: Use this command to generate HTML documentation for your project, including reports on test coverage, dependencies, and more.
                
            b. mvn site:deploy:
            ====================
                Description: Deploys the generated site documentation to a server.
                Use Case: Use this command to publish your project documentation to a remote server.
                
        3. Dependency Management Commands:
        ===================================
            a. mvn dependency:tree:
            ========================
                Description: Displays the dependency tree for the project, showing how dependencies are related.
                Use Case: Use this command to visualize the dependency hierarchy of your project and identify potential conflicts.
                
            b. mvn dependency:analyze:
            ===========================
                Description: Analyzes the project's dependencies and reports any unused or undeclared dependencies.
                Use Case: Use this command to clean up your pom.xml by identifying unnecessary dependencies.
                
        4. Plugin and Goal Commands:
        =============================
            a. mvn help:describe:
            ======================
                Description: Provides detailed information about a specific plugin goal.
                Use Case: Use this command to understand what a particular plugin goal does and how to configure it.
                -- mvn help:describe -Dplugin=<plugin> -Dgoal=<goal>
                
            b. mvn help:effective-pom:
            ===========================
                Description: Displays the effective POM for the project, which includes all inherited and default values.
                Use Case: Use this command to see the final POM that Maven uses for your project, including defaults and inherited configurations.
                
        5. Advanced Commands:
        ======================
            a. mvn release:prepare:
            ========================
                Description: Prepares the project for a release by updating version numbers, tagging the project in the SCM, and committing the release.
                Use Case: Use this command when you're ready to release a new version of your project.
                
            b. mvn release:perform:
            ========================
                Description: Performs the actual release, including deploying the artifacts to a repository and completing the release process.
                Use Case: Use this command after mvn release:prepare to finish the release process.
                
        6. Running a Project:
        ======================
            a. mvn exec:java:
            ==================
                Description: Runs a Java program within the project using the specified main class.
                Use Case: Use this command to run your application directly from the Maven environment.
                -- mvn exec:java -Dexec.mainClass="com.example.Main"

        7. Running Custom Plugins:
        ===========================
            a. mvn <plugin>:<goal>:
            ========================
                Description: Executes a specific goal of a Maven plugin.
                Use Case: Use this command to run a specific task provided by a Maven plugin. For example, mvn compiler:compile compiles the source code using the Compiler Plugin.
                
        8. Help Commands:
        ==================
            a. mvn help:help:
            ==================
                Description: Provides help for Maven's commands and usage.
                Use Case: Use this command to get help on using Maven, understanding its options, and configuring your environment.
                
                
    D. Maven Dependencies and scopes:
    ==================================
        1. Maven simplifies the creation and management of dependencies by using a centralized repository that contains a vast collection of open-source libraries and framework. To create and manage 
           dependencies in maven, follow these steps;
           
                <dependencies>
                    <dependency>
                       <groupId>org.springframework</groupId>
                       <artifactId>spring-core</artifactId>
                       <version>5.3.9</version>
                       <scope>compile</scope>
                    </dependency>
                    <!-- Add more dependencies here -->
                </dependencies>
                
        2. Resolve Dependencies: Once the dependencies are defined in the "pom.xml" file, maven will automatically download and resolve the dependencies from the central repository. Maven checks if
           the dependency is already downloded in the local repository, and if not, downloads it from the central repository.
           Understanding Maven Dependencies:
           ==================================
               In Maven, dependencies are specified in the <dependencies> section of the pom.xml file. Each dependency is defined by the following elements:
                   a. Group ID (<groupId>): The group or organization that produced the dependency (e.g., org.springframework).
                   b. Artifact ID (<artifactId>): The name of the library (e.g., spring-core).
                   c. Version (<version>): The specific version of the library you want to use (e.g., 5.3.9).
                   d. Scope (<scope>): The classpath visibility and lifecycle of the dependency (e.g., compile, test, provided, etc.).
                   e. Optional (<optional>): A boolean that indicates if the dependency is optional.
                   f. Exclusions (<exclusions>): Used to exclude specific transitive dependencies that you donâ€™t want to include. 
                   
        3. Maven Dependency Scopes:
        ============================
            Dependency scopes control the visibility and lifecycle of dependencies. Here are the main scopes:
            a. compile:
                Description: The default scope. Dependencies with this scope are available in all classpaths (compile, runtime, and test).
                Use Case: Use this scope for libraries that are required for both compiling and running your project.
            b. provided:
                Description: Dependencies are provided by the runtime environment (like a servlet container) and are not included in the final build.
                Use Case: Use this scope for libraries that are available in the runtime environment, such as servlet APIs.
            c. runtime:
                Description: Dependencies are not needed for compilation but are required at runtime.
                Use Case: Use this scope for libraries that are only needed when the application is running.
            d. test:
                Description: Dependencies are only available during testing and are not included in the final build.
                Use Case: Use this scope for libraries that are required for running tests, such as testing frameworks like JUnit.
            e. system:
                Description: Dependencies are provided by the user and are not retrieved from the repository. They require an explicit path.
                Use Case: Use this scope rarely, usually when dealing with legacy libraries not available in a Maven repository.
            f. import:
                Description: This scope is used with <dependencyManagement> to import dependencies from another POM.
                Use Case: Use this scope when you need to import dependencies from a BOM (Bill of Materials).
                
        4. Types of Dependencies:
        ==========================
            -- In maven, there are several types of dependencies that can be defined in the project "pom.xml" file. These dependencies specify the libraries or frameworks that the project needs to 
               compile, test, or run. The main  types of dependencies in maven are: 
               a. Direct Dependencies:
               ========================
                   Description: These are dependencies that are explicitly defined in your project's pom.xml file. 
                   Ex:
                   ==== 
                       <dependency>
                            <groupId>org.springframework</groupId>
                            <artifactId>spring-core</artifactId>
                            <version>5.3.9</version>
                       </dependency>
                       
                b. Transitive Dependencies:
                ============================
                    -- Maven also handles transitive dependencies, which means that if your project depends on library A, and library A depends on library B, Maven will automatically include 
                       library B in your project as well.
                    Ex:
                    ====
                        If your project depends on "spring-context", which in turn depends on "spring-core", Maven will include "spring-core" in your project as a transitive dependency.
                        <dependency>
                            <groupId>org.springframework</groupId>
                            <artifactId>spring-context</artifactId>
                            <version>5.3.9</version>
                        </dependency>
                    
                    Excluding Transitive Dependencies:
                    ===================================
                        Sometimes, you may want to exclude a transitive dependency. This can be done using the <exclusions> tag.
                        Ex:
                        ====
                            <dependency>
                                <groupId>org.springframework</groupId>
                                <artifactId>spring-context</artifactId>
                                <version>5.3.9</version>
                                <exclusions>
                                    <exclusion>
                                        <groupId>commons-logging</groupId>
                                        <artifactId>commons-logging</artifactId>
                                    </exclusion>
                                </exclusions>
                            </dependency>
                   
                c. Optional Dependencies:
                ==========================
                    -- These dependencies are not required by default and are included in your project only if explicitly specified. Optional dependencies do not affect transitive dependencies.
                    Ex:
                    ====
                        <dependency>
                            <groupId>com.example</groupId>
                            <artifactId>example-lib</artifactId>
                            <version>1.0.0</version>
                            <optional>true</optional>
                        </dependency>
                        
                d. Test Dependencies:
                ======================
                    -- Description: These dependencies are required only during the testing phase and are not included in the final build. They are typically used in unit and integration testing.
                    -- Scope: test
                    Ex:
                    ====
                        <dependency>
                            <groupId>junit</groupId>
                            <artifactId>junit</artifactId>
                            <version>4.13.2</version>
                            <scope>test</scope>
                        </dependency>
                        
                e. Provided Dependencies:
                ==========================
                    -- These dependencies are provided by the runtime or container and are not included in the final artifact. They are available during compilation and testing but are 
                       assumed to be available in the runtime environment.
                    -- Scope: provided
                    Ex:
                    ====
                        <dependency>
                            <groupId>javax.servlet</groupId>
                            <artifactId>javax.servlet-api</artifactId>
                            <version>4.0.1</version>
                            <scope>provided</scope>
                        </dependency>
                        
                f. Runtime Dependencies:
                =========================
                    -- These dependencies are not needed during the compilation phase but are required at runtime. Maven includes them in the final artifact, ensuring they are available when the 
                       application is executed.
                    -- Scope: runtime
                    Ex:
                    ====
                        <dependency>
                            <groupId>mysql</groupId>
                            <artifactId>mysql-connector-java</artifactId>
                            <version>8.0.23</version>
                            <scope>runtime</scope>
                        </dependency>
                        
                g. System Dependencies:
                ========================
                    -- These dependencies are provided by the user and must be available in a specific location on the file system. Maven does not resolve these dependencies from the repository.
                    -- Scope: system
                    Ex:
                    ====
                        <dependency>
                            <groupId>com.example</groupId>
                            <artifactId>example-lib</artifactId>
                            <version>1.0.0</version>
                            <scope>system</scope>
                            <systemPath>${project.basedir}/lib/example-lib-1.0.0.jar</systemPath>
                        </dependency> 
                        
                h. Import Dependencies:
                ========================
                    -- Used within the <dependencyManagement> section, import dependencies allow you to import dependencies from another pom.xml or BOM (Bill of Materials). This is common in 
                       multi-module projects where a set of dependencies is managed centrally.
                    -- Scope: import
                    Ex:
                    ====
                        <dependencyManagement>
                            <dependencies>
                                <dependency>
                                    <groupId>org.springframework.boot</groupId>
                                    <artifactId>spring-boot-dependencies</artifactId>
                                    <version>2.4.5</version>
                                    <type>pom</type>
                                    <scope>import</scope>
                                </dependency>
                            </dependencies>
                        </dependencyManagement>
                        
            Dependency Management:
            =======================
                In larger projects, you might have a parent POM that defines a set of common dependencies and versions. This is done using the <dependencyManagement> section.
                Ex:
                ====
                    <dependencyManagement>
                        <dependencies>
                            <dependency>
                                <groupId>org.springframework</groupId>
                                <artifactId>spring-core</artifactId>
                                <version>5.3.9</version>
                            </dependency>
                            <!-- Other managed dependencies -->
                        </dependencies>
                    </dependencyManagement> 
                    
            Managing Dependency Conflicts:
            ===============================
                -- In projects with many dependencies, you might encounter version conflicts. Maven resolves these conflicts using a mechanism known as nearest-wins. The dependency declared closest to your project (in terms of the dependency tree) wins.
                -- To manually resolve conflicts, you can:
                       a. Use <dependencyManagement> to force specific versions.
                       b. Exclude conflicting transitive dependencies.
                       
                Note:
                ======
                    -- Maven provides several goals to manage dependencies, including adding, removing, and updating dependencies. For example, to update a dependency, you can use the following 
                       command:
                    -- Command: mvn version:use-latest-versions
                    
                    
    E. Maven Plugins:
    ==================
        -- Maven plugins are essential tools in the Maven ecosystem, used to perform tasks during the build process. These tasks can range from compiling code, running tests, packaging the project, 
           deploying artifacts, and more. Maven plugins are typically specified in the pom.xml file of your project.
        -- Maven plugins are integral to the build process, providing the ability to automate various tasks. By using and configuring these plugins effectively, you can streamline your project's 
           build, test, packaging, and deployment processes.
           Types of Maven Plugins:
           ========================
               Maven plugins are categorized into two main types:
               a. Build Plugins: These plugins are used during the build process of a project. They execute tasks such as compiling code, running tests, packaging the project, etc.
               b. Reporting Plugins: These plugins are used to generate reports about the project. They are typically executed during the site generation phase to create project documentation.
               
           1. Maven Compiler Plugin:
           ==========================
               -- Purpose: Compiles the Java source code of the project.
               -- Phases: compile, test-compile
               Ex:
               ====
                   <build>
                        <plugins>
                            <plugin>
                                <groupId>org.apache.maven.plugins</groupId>
                                <artifactId>maven-compiler-plugin</artifactId>
                                <version>3.8.1</version>
                                <configuration>
                                    <source>1.8</source>
                                    <target>1.8</target>
                                </configuration>
                            </plugin>
                        </plugins>
                    </build>
                    
            2. Maven Surefire Plugin:
            ==========================
                -- Purpose: Runs the unit tests of an application.
                -- Phases: test
                Ex:
                ====
                    <build>
                        <plugins>
                            <plugin>
                                <groupId>org.apache.maven.plugins</groupId>
                                <artifactId>maven-surefire-plugin</artifactId>
                                <version>2.22.2</version>
                            </plugin>
                        </plugins>
                    </build>
                    
            3. Maven Failsafe Plugin:
            ==========================
                -- Purpose: Runs integration tests
                -- Phases: integration-test, verify
                Ex:
                ====
                    <build>
                        <plugins>
                            <plugin>
                                <groupId>org.apache.maven.plugins</groupId>
                                <artifactId>maven-failsafe-plugin</artifactId>
                                <version>2.22.2</version>
                                <executions>
                                    <execution>
                                        <goals>
                                            <goal>integration-test</goal>
                                            <goal>verify</goal>
                                        </goals>
                                    </execution>
                                </executions>
                            </plugin>
                        </plugins>
                    </build>
                    
            4. Maven Jar Plugin:
            =====================
                -- Purpose: Packages the compiled code into a JAR file.
                -- Phases: package
                Ex:
                ====
                    <build>
                        <plugins>
                            <plugin>
                                <groupId>org.apache.maven.plugins</groupId>
                                <artifactId>maven-jar-plugin</artifactId>
                                <version>3.2.0</version>
                            </plugin>
                        </plugins>
                    </build>
                    
            5. Maven Install Plugin:
            =========================
                -- Purpose: Installs the project's artifact into the local Maven repository.
                -- Phases: install
                Ex:
                ====
                    <build>
                        <plugins>
                            <plugin>
                                <groupId>org.apache.maven.plugins</groupId>
                                <artifactId>maven-install-plugin</artifactId>
                                <version>2.5.2</version>
                            </plugin>
                        </plugins>
                    </build>
                    
            6. Maven Deploy Plugin:
            ========================
                -- Purpose: Deploys the project artifact to a remote repository.
                -- Phases: deploy
                Ex:
                ====
                    <build>
                        <plugins>
                            <plugin>
                                <groupId>org.apache.maven.plugins</groupId>
                                <artifactId>maven-deploy-plugin</artifactId>
                                <version>2.8.2</version>
                            </plugin>
                        </plugins>
                    </build> 
                    
            7. Maven Clean Plugin:
            =======================
                -- Purpose: Cleans the target directory, removing all files generated by the previous build.
                -- Phases: clean
                Ex:
                ====
                    <build>
                        <plugins>
                            <plugin>
                                <groupId>org.apache.maven.plugins</groupId>
                                <artifactId>maven-clean-plugin</artifactId>
                                <version>3.1.0</version>
                            </plugin>
                        </plugins>
                    </build>
                    
            8. Maven Site Plugin:
            ======================
                -- Purpose: Generates a site for the project, including reports and documentation.
                -- Phases: site
                Ex:
                ====
                    <build>
                        <plugins>
                            <plugin>
                                <groupId>org.apache.maven.plugins</groupId>
                                <artifactId>maven-site-plugin</artifactId>
                                <version>3.7.1</version>
                            </plugin>
                        </plugins>
                    </build>
                    
            9. Maven Assembly Plugin:
            ==========================
                -- Purpose: Creates an archive (e.g., zip, tar) of the project with all its dependencies.
                -- Phases: package
                Ex:
                ====
                    <build>
                        <plugins>
                            <plugin>
                                <groupId>org.apache.maven.plugins</groupId>
                                <artifactId>maven-assembly-plugin</artifactId>
                                <version>3.3.0</version>
                                <configuration>
                                    <descriptors>
                                        <descriptor>src/assembly/bin.xml</descriptor>
                                    </descriptors>
                                </configuration>
                            </plugin>
                        </plugins>
                    </build>
                    
            
        
        